#lang ivy1.5

# List implementation notes:
# - all nodes are reachSeqable to themselves, even if they are not in the list
# - the headSeq is a sentinelSeq

# - assume a before b only on linearization point
# - we may assume uniqness of inserted elements

#plan:
#individual for each line of code (E7, D2)
#type line
#type thread  - holds current program counter, and every local field (headSeq, tailSeq etc.). saving local variables is through relations.
#
#relation used(X) - was there a thread that started inserting this node?

type node
type state

relation reachSeq (N1:node, N2:node)# if N2 is reachSeqable from N1
relation nondetSeq
individual sentinelSeq:node
individual headSeq:node
individual tailSeq:node
individual emptySeq:node

individual a:node
individual b:node
individual q1:state # a,b outside of queue
individual q2:state # a inside, b outside
individual q3:state # both a,b are inside
individual q4:state # a outside, b inside
individual qe:state # error state (throws)
individual qc:state #pointer to current state

axiom q1 ~= qe

axiom q2 ~= q1
axiom q2 ~= qe

axiom q3 ~= q1
axiom q3 ~= q2
axiom q3 ~= qe

axiom q4 ~= q1
axiom q4 ~= q2
axiom q4 ~= q3
axiom q4 ~= qe

axiom Q = q1 | Q = q2 | Q = qe | Q=q3 | Q=q4

axiom a ~= b
axiom a ~= emptySeq
axiom b ~= emptySeq
axiom a ~= sentinelSeq
axiom b ~= sentinelSeq
axiom emptySeq ~= sentinelSeq

init reachSeq(N1, N2) <-> N1 = N2 # every node is reachSeqable only from itself
init sentinelSeq = headSeq & headSeq = tailSeq & emptySeq ~= headSeq # the list contains only the headSeq sentinelSeq
init qc = q1 # the DFA's initial state is q1

action q1_action = {
    assume qc = q1;
    local x:node {
  		nondetSeq := *;
      if nondetSeq {
			assume x ~= emptySeq;
			assume x ~= b;
			call enq(x);
        if x = a {
            qc := q2
        }
      }
      else {
        call x := deq();
        if x = a | x = b {
            qc := qe
        }
      }
    }
}

action q2_action = {
	assume qc = q2;
	local x:node {
		assume x ~= a;
		nondetSeq := *;
		if nondetSeq {
      assume x ~= emptySeq;
			call enq(x);
			if x = b {
				qc := q3
			}
		}
		else {
			call x := deq();
			if x = b | x = emptySeq {
				qc := qe
			};
			if x = a {
				qc := q1
			}
		}
	}
}

action q3_action = {
	assume qc = q3;
	local x:node {
		assume x ~= a & x ~= b;
		nondetSeq := *;
		if nondetSeq {
			assume x ~= emptySeq;
			call enq(x)
		}
		else {
			call x := deq();
			if x = b | x = emptySeq {
			 qc := qe
			};
			if x = a {
				qc := q4
			}
		}
	}
}

action q4_action = {
	assume qc = q4;
	local x:node {
		assume x ~= a & x ~= b;
		nondetSeq := *;
		if nondetSeq {
			assume x ~= emptySeq;
			call enq(x)
		}
		else {
			call x := deq();
			if x = b {
				qc := q1
			};
			if x = a | x = emptySeq{
				qc := qe
			}
		}
	}
}


action enq(n:node) = {
  assume n~= emptySeq;
  assume ~reachSeq(headSeq,n);
  assume reachSeq(n,X) -> X = n;
  reachSeq(X,Y) := reachSeq(X,Y) | (reachSeq(X,tailSeq) & Y = n);
  tailSeq := n
}

action deq returns(n:node) = {
    if (headSeq = tailSeq) {
        n := emptySeq
    }
    else {
        assume reachSeq(headSeq,n) & ((reachSeq(X,n) -> (n=X | X=headSeq))) & n ~= headSeq;
        reachSeq(X,Y):= (reachSeq(X,Y) & Y ~= n & X ~= n) | X = Y;
        if (reachSeq(headSeq,X) -> headSeq = X) {
            tailSeq := headSeq
        }
    }
}
action test = {
}
#export test
#export enq
#export deq
export q1_action
export q2_action
export q3_action
export q4_action


conjecture reachSeq(X,X)
conjecture (reachSeq(X,Y) & reachSeq(Y,Z)) -> reachSeq(X,Z)
conjecture reachSeq(X,Y) & reachSeq(Y,X) -> X = Y
conjecture reachSeq(X,Y) & reachSeq(X,Z) -> reachSeq(Y,Z) | reachSeq(Z,Y)
conjecture reachSeq(headSeq,tailSeq)
conjecture (forall X. reachSeq(headSeq,X) -> (headSeq = X)) -> headSeq = tailSeq
conjecture reachSeq(tailSeq,X) -> X=tailSeq
conjecture qc ~= qe
conjecture emptySeq ~=headSeq & emptySeq ~=sentinelSeq & emptySeq ~= tailSeq
conjecture sentinelSeq = headSeq
conjecture headSeq=tailSeq -> ( reachSeq(X,tailSeq) -> X = tailSeq )
conjecture reachSeq(X,tailSeq) -> reachSeq(headSeq,X)
conjecture (reachSeq(X,Y) & X~=Y) -> reachSeq(X,tailSeq)# if a node is connected, it must be in the queue
conjecture (reachSeq (X,emptySeq) | reachSeq (emptySeq, X)) -> X= emptySeq

conjecture qc=q1 -> (reachSeq(X,a) | reachSeq(a,X)) -> (X=a & a~=headSeq & a~=tailSeq)
conjecture qc=q1 -> ~reachSeq(b,tailSeq)
conjecture qc=q2 -> reachSeq(a,tailSeq)
conjecture qc=q2 -> ~reachSeq(b,tailSeq)
conjecture qc=q3 -> (reachSeq(a,tailSeq) & reachSeq (b,tailSeq) & reachSeq (a,b))
conjecture qc=q4 ->~reachSeq (a,tailSeq)
conjecture qc=q4-> reachSeq(b,tailSeq)
