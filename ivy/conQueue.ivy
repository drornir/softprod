#lang ivy1.5
# ivy ui=cti conQueue.ivy
# no longer based on this implementation: https://www.cs.rochester.edu/research/synchronization/pseudocode/queues.html

#TODO make sure order of conQ and serQ is the same


type node
type thread
type line


relation reach (N1:node, N2:node)# if N2 is reachable from N1
relation nondet
relation inLinel0(T:thread)
relation inLinee0(T:thread)
relation inLinee1(T:thread)
relation inLinee2(T:thread)
relation inLinee3(T:thread)
relation inLinee4(T:thread)
relation inLinee5(T:thread)
relation inLinee6(T:thread)
relation inLinee7(T:thread)
relation inLinefinishedLine(T:thread)
relation inLined0(T:thread)
relation inLined1(T:thread)
relation inLined2(T:thread)
relation inLined3(T:thread)
relation inLined4(T:thread)
relation inLined5(T:thread)
relation inLinedReturn(T:thread)

conjecture inLinel0(T1) & inLinee0(T2) -> T1 ~= T2

relation used (N:node) #in order to simulate 'new' node being created

#enq vars
relation threadEnqLast (T:thread,N:node)# local variable of last in thread t
relation threadEnqNode(T:thread, N:node) # the node thread T is trying to enqueue
relation threadEnqNext(T:thread, N:node) # the node which is "next" in line 4 in enqueue
#deq vars
relation threadDeqHead(T:thread, N:node)#the head in deq
relation threadDeqLast(T:thread, N:node)#the tail in deq
relation threadDeqNext(T:thread, N:node)#next
relation threadDeqReturnNode(T:thread, N:node)#rv

relation head(N:node)
relation tail(N:node)


#individual l0:line #starting line

#individual e0:line # first line in enqeue
#individual e1:line # first line in enqeue loop
#individual e2:line # set "next"
#individual e3:line # first compare
#individual e4:line # second compare and CAS if needed
#individual e5:line # last line in enqeue
#individual e6:line
#individual e7:line

#individual finishedLine:line

#individual d0:line #first line in dequeue
#individual d1:line #first line in dequeue
#individual d2:line #first line in dequeue
#individual d3:line #first line in dequeue
#individual d4:line #first line in dequeue
#individual d5:line #first line in dequeue
#individual dReturn:line #first line in dequeue

individual initNode:node
individual nullNode:node

axiom initNode ~=nullNode



#init inLine(T,l0) & (inLine (T,L) -> L=l0)
init head(N) -> N=initNode
init tail(N) -> N=initNode
init used(initNode) & used(nullNode)
init ~threadEnqNode(T,N)
init ~threadEnqLast(T,N)
init ~threadEnqNext(T,N)
init reach (X,Y) ->(X=Y) | Y=nullNode
init reach(X,X)
init reach(N,nullNode)

action l0_action(t:thread) = { #decide on an action (enqueue or dequeue)
	assume inLinel0 (t);
	inLinel0(t) := false;
	nondet :=*;
	if nondet {
		inLined0(t) := true
	}
	else {
		inLinee0 (t) := true
	}

}

action e0_action (t:thread,n:node)= { #simulating lines E1
	assume inLinee0(t);
	assume ~used(n);
	assume (reach(X,n) | reach (n,X)) -> n=X;
	inLinee0(t):= false;

	threadEnqNode(t,n):= true;
	used(n):= true;
	reach(n,nullNode):=true;
	inLinee1 (t):= true
}

action e1_action (t:thread,globalTail:node)= { #simulating line E3
	assume inLinee1(t);
	assume tail(globalTail);
	inLinee1(t):= false;

	threadEnqLast(t,M):=false; 	#set to false for all nodes (edit: i dont think this is needed)

	threadEnqLast(t,globalTail):=true;

	inLinee2 (t):= true
}

action e2_action (t:thread,tLast:node,lastNext:node)= { #simulating line E4
	assume inLinee2(t);
	assume threadEnqLast(t,tLast);
	assume reach(tLast,lastNext) & (reach(N,lastNext) -> reach(tLast,N));
	inLinee2(t):= false;

	threadEnqNext(t,M):=false;	#set to false for all nodes

	threadEnqNext(t,lastNext):=true;

	inLinee3 (t):= true
}

action e3_action (t:thread,tLast:node,globalTail:node)= { #simulating line E5 //if the condition holds go to next line . otherwise go to loop start
	assume inLinee3(t);
	assume threadEnqLast(t,tLast);
	assume tail(globalTail);
	inLinee3(t):= false;

	if globalTail=tLast {
		inLinee4 (t) := true
	} else {
		inLinee1 (t) := true
	}
}

action e4_action (t:thread,tLast:node)= { #simulating line E7
	assume inLinee4(t);
	assume threadEnqLast(t,tLast);
	inLinee4(t):= false;

	if tLast = nullNode {
		inLinee5(t):= true
	}
	else {
		inLinee6(t):= true
	}

}
action e5_action (t:thread,last:node,lastNext:node,newNode:node)= { #simulating line E8
	assume inLinee5(t);
	assume threadEnqNode(t,newNode);
	assume threadEnqLast(t,last);
	assume reach(last,lastNext) & (reach(X,lastNext) -> reach(X,last));
	inLinee5(t):=false;

	# cas(lastNext,nullNode,newNode)
	if lastNext = nullNode {#sucessfull CAS, node inserted
		reach(last, lastNext) := false;
		reach(last, newNode) := true;
		# TODO reach(X,Y) := reach(X,Y) | (reach(X,tail) & Y = n);

		reach(X,Y) := reach(X,Y) | (reach(X,last) & Y = newNode);

		call enq(newNode);

		inLinee7(t):=true #goto line E14
	}
	else {
		inLinee6(t):=true #goto line E11
	}
}

action e6_action (t:thread, globalTail:node, last:node, next:node) = { #line E11
	assume inLinee6(t);
	assume tail(globalTail);
	assume threadEnqLast(t,last);
	assume threadEnqNext(t,next);
	inLinee6(t):=false;

	if globalTail = last {
		tail(globalTail) := false;
		tail(next) := true
	};

	inLinee7(t):=true #goto line E14
}

action e7_action (t:thread, globalTail:node, last:node, newNode:node) = { #line 14
	assume inLinee7(t);
	assume tail(globalTail);
	assume threadEnqLast(t,last);
	assume threadEnqNode(t,newNode);
	inLinee7(t):=false;

	# cas(globalTail,last,newNode)
	if globalTail = last {
		tail(globalTail) := false;
		tail(newNode) := true
	};

	inLinefinishedLine(t):=true
}

###################### DEQUEUE ########################

action d0_action (t:thread)= { # D2 get local head
	assume inLined0(t);
	inLined0(t) := false;

	threadDeqHead(t,M) := false; 	#set to false for all nodes
	if some n:node. head(n){
		threadDeqHead(t,n) := true
	};
	inLined1 (t) := true
}

action d1_action (t:thread)= { # D3 get local tail
	assume inLined1(t);
	inLined1(t) := false;

	threadDeqLast(t,M) := false; 	#set to false for all nodes
	if some n:node. tail(n){
		threadDeqLast(t,n) := true
	};
	inLined2 (t) := true
}


# if the queue is empty, the linearization point is at D4, but we KNOW it was a
# linearization point only at D7. However 'first', 'last' and 'next' of D5-6 can
# not asynchronously change, because they are local variables of the thread.
# Therefore, we can implement D4-6 in a single action without harming correctness.
action d2_action (t:thread, tFirst:node, tLast:node, firstNext:node, globalTail:node) = { # D4-9 get first->next and check emptyness and return it
#TODO dror needs to document this action
	assume inLined2(t);
	assume tail(globalTail);
	assume threadDeqHead(t,tFirst);
	assume threadDeqLast(t,tLast);
	assume reach(tFirst,firstNext) & (reach(N,firstNext) -> reach(tFirst,N));
	inLined2 (t) := false;

	threadDeqNext(t,M) := false;	#set to false for all nodes
	# D4
	threadDeqNext(t,firstNext) := true;
	# D5-6
	if tFirst = tLast {
		if firstNext = nullNode {
			# D7
			# linearization point EMPTY
			threadDeqReturnNode(t, nullNode) := true;

			assert deq() = emptySeq;

			inLinedReturn (t) := true # TODO build "return mechanism" and then fix here
		} else {
			# D9 CAS(&tail, last, next);
			if globalTail = tLast {
				tail(globalTail) := false;
				tail(firstNext) := true
			};
			inLined0(t) := true # goto loop start
		}
	} else {
		inLined3 (t):= true
	}
}

action d3_action (t:thread,tFirst:node) = {# D11
 	assume inLined3(t);
	inLined3(t):=false;
 	assume threadDeqHead(t,tFirst);
	threadDeqReturnNode(t,tFirst):=true;
	inLined4(t):=true

}

action d4_action (t:thread,tFirst:node,globalHead:node,firstNext:node) = {#D12
	assume inLined4(t);
	assume head(globalHead);
	assume threadDeqHead(t,tFirst);
	assume reach(tFirst,firstNext) & (reach(N,firstNext) -> reach(tFirst,N));
	inLined4(t):=false;
	if globalHead = tFirst{
		head(globalHead):=false;
		head(firstNext):=true;
		inLinedReturn (t) := true # TODO build "return mechanism" and then fix here
	}else{
		inLined0(t):=true# goto loop start
	}	
}

action dReturn_action(t:thread,rv:node) returns(returnNode:node) = {
	assume inLinedReturn(t);
	assume threadDeqReturnNode(t, rv);
	inLinedReturn(t):=false;
#	inLinel0(t):=true; # no need to run again, we can assume each thread only makes one action and then gets stuck in dReturn
	assert deq() = returnNode;
	returnNode :=rv
}

action test = {
	 
}

#export l0_action
#export e0_action
#export e1_action
#export e2_action
#export e3_action
#export e4_action
#export e5_action
export e6_action
#export e7_action
#export d1_action
#export d2_action
#export d3_action
#export d4_action
#export d4_action
#export test

conjecture reach(X,X)
conjecture (reach(X,Y) & reach(Y,Z)) -> reach(X,Z)
conjecture reach(X,Y) & reach(Y,X) -> X = Y
conjecture reach(X,Y) & reach(X,Z) -> reach(Y,Z) | reach(Z,Y)

conjecture (threadEnqNode (T,N1) & threadEnqNode (T,N2)) -> N1=N2
#conjecture (inLine (T,L) & (L=l0 | L=e0 | L=d0) ) -> ~threadEnqNode(T,N)
#conjecture (inLine (T,L1) & inLine (T,L2)) -> L1=L2
conjecture head(N1) & head(N2) -> N1=N2

conjecture (threadEnqNext (T,N1) & threadEnqNext (T,N2)) -> N1=N2

conjecture reach(N,nullNode)

conjecture head(X) -> used(X)
conjecture tail(X) -> used(X)
conjecture head(X) & reach (X,Y) -> used(Y)
conjecture (head(X) & tail (Y)) -> reach (X,Y)
conjecture (head(X) & head(Y)) -> X=Y
conjecture (tail(X) & tail(Y)) -> X=Y

conjecture threadEnqNode(T,X) -> (reach(X,Y) -> X=Y)
conjecture (threadEnqNode (T,N1) & threadEnqNode (T,N2)) -> N1=N2




##############################################################################
##############################################################################
##############################################################################
#SEQUENTIAL QUEUE
##############################################################################
##############################################################################
##############################################################################

relation reachSeq (N1:node, N2:node)# if N2 is reachSeqable from N1

individual emptySeq:node
individual headSeq:node
individual tailSeq:node

init reachSeq(N1, N2) <-> N1 = N2 # every node is reachSeqable only from itself
init   headSeq = tailSeq & emptySeq ~= headSeq # the list contains only the headSeq

action enq(n:node) = {
  assume n~= emptySeq;
  assume ~reachSeq(headSeq,n);
  assume reachSeq(n,X) -> X = n;
  reachSeq(X,Y) := reachSeq(X,Y) | (reachSeq(X,tailSeq) & Y = n);
  tailSeq := n
}

action deq returns(n:node) = {
    if (headSeq = tailSeq) {
        n := emptySeq
    }
    else {
        assume reachSeq(headSeq,n) & ((reachSeq(X,n) -> (n=X | X=headSeq))) & n ~= headSeq;
        reachSeq(X,Y):= (reachSeq(X,Y) & Y ~= n & X ~= n) | X = Y;
        if (reachSeq(headSeq,X) -> headSeq = X) {
            tailSeq := headSeq
        }
    }
}

conjecture reachSeq(X,X)
conjecture (reachSeq(X,Y) & reachSeq(Y,Z)) -> reachSeq(X,Z)
conjecture reachSeq(X,Y) & reachSeq(Y,X) -> X = Y
conjecture reachSeq(X,Y) & reachSeq(X,Z) -> reachSeq(Y,Z) | reachSeq(Z,Y)
conjecture reachSeq(headSeq,tailSeq)
#conjecture (forall X. reachSeq(headSeq,X) -> (headSeq = X)) -> headSeq = tailSeq
conjecture reachSeq(tailSeq,X) -> X=tailSeq
conjecture emptySeq ~=headSeq & emptySeq ~= tailSeq
conjecture headSeq=tailSeq -> ( reachSeq(X,tailSeq) -> X = tailSeq )
conjecture reachSeq(X,tailSeq) -> reachSeq(headSeq,X)
conjecture (reachSeq(X,Y) & X~=Y) -> reachSeq(X,tailSeq)# if a node is connected, it must be in the queue
conjecture (reachSeq (X,emptySeq) | reachSeq (emptySeq, X)) -> X= emptySeq


#automatically generated conjectures
conjecture inLinel0(T1) & inLinee0(T2) -> T1 ~= T2
conjecture inLinel0(T1) & inLinee1(T2) -> T1 ~= T2
conjecture inLinel0(T1) & inLinee2(T2) -> T1 ~= T2
conjecture inLinel0(T1) & inLinee3(T2) -> T1 ~= T2
conjecture inLinel0(T1) & inLinee4(T2) -> T1 ~= T2
conjecture inLinel0(T1) & inLinee5(T2) -> T1 ~= T2
conjecture inLinel0(T1) & inLinee6(T2) -> T1 ~= T2
conjecture inLinel0(T1) & inLinee7(T2) -> T1 ~= T2
conjecture inLinel0(T1) & inLined0(T2) -> T1 ~= T2
conjecture inLinel0(T1) & inLined1(T2) -> T1 ~= T2
conjecture inLinel0(T1) & inLined2(T2) -> T1 ~= T2
conjecture inLinel0(T1) & inLined3(T2) -> T1 ~= T2
conjecture inLinel0(T1) & inLined4(T2) -> T1 ~= T2
conjecture inLinel0(T1) & inLined5(T2) -> T1 ~= T2
conjecture inLinel0(T1) & inLinefinishedLine(T2) -> T1 ~= T2
conjecture inLinel0(T1) & inLinedReturn(T2) -> T1 ~= T2
conjecture inLinee0(T1) & inLinee1(T2) -> T1 ~= T2
conjecture inLinee0(T1) & inLinee2(T2) -> T1 ~= T2
conjecture inLinee0(T1) & inLinee3(T2) -> T1 ~= T2
conjecture inLinee0(T1) & inLinee4(T2) -> T1 ~= T2
conjecture inLinee0(T1) & inLinee5(T2) -> T1 ~= T2
conjecture inLinee0(T1) & inLinee6(T2) -> T1 ~= T2
conjecture inLinee0(T1) & inLinee7(T2) -> T1 ~= T2
conjecture inLinee0(T1) & inLined0(T2) -> T1 ~= T2
conjecture inLinee0(T1) & inLined1(T2) -> T1 ~= T2
conjecture inLinee0(T1) & inLined2(T2) -> T1 ~= T2
conjecture inLinee0(T1) & inLined3(T2) -> T1 ~= T2
conjecture inLinee0(T1) & inLined4(T2) -> T1 ~= T2
conjecture inLinee0(T1) & inLined5(T2) -> T1 ~= T2
conjecture inLinee0(T1) & inLinefinishedLine(T2) -> T1 ~= T2
conjecture inLinee0(T1) & inLinedReturn(T2) -> T1 ~= T2
conjecture inLinee1(T1) & inLinee2(T2) -> T1 ~= T2
conjecture inLinee1(T1) & inLinee3(T2) -> T1 ~= T2
conjecture inLinee1(T1) & inLinee4(T2) -> T1 ~= T2
conjecture inLinee1(T1) & inLinee5(T2) -> T1 ~= T2
conjecture inLinee1(T1) & inLinee6(T2) -> T1 ~= T2
conjecture inLinee1(T1) & inLinee7(T2) -> T1 ~= T2
conjecture inLinee1(T1) & inLined0(T2) -> T1 ~= T2
conjecture inLinee1(T1) & inLined1(T2) -> T1 ~= T2
conjecture inLinee1(T1) & inLined2(T2) -> T1 ~= T2
conjecture inLinee1(T1) & inLined3(T2) -> T1 ~= T2
conjecture inLinee1(T1) & inLined4(T2) -> T1 ~= T2
conjecture inLinee1(T1) & inLined5(T2) -> T1 ~= T2
conjecture inLinee1(T1) & inLinefinishedLine(T2) -> T1 ~= T2
conjecture inLinee1(T1) & inLinedReturn(T2) -> T1 ~= T2
conjecture inLinee2(T1) & inLinee3(T2) -> T1 ~= T2
conjecture inLinee2(T1) & inLinee4(T2) -> T1 ~= T2
conjecture inLinee2(T1) & inLinee5(T2) -> T1 ~= T2
conjecture inLinee2(T1) & inLinee6(T2) -> T1 ~= T2
conjecture inLinee2(T1) & inLinee7(T2) -> T1 ~= T2
conjecture inLinee2(T1) & inLined0(T2) -> T1 ~= T2
conjecture inLinee2(T1) & inLined1(T2) -> T1 ~= T2
conjecture inLinee2(T1) & inLined2(T2) -> T1 ~= T2
conjecture inLinee2(T1) & inLined3(T2) -> T1 ~= T2
conjecture inLinee2(T1) & inLined4(T2) -> T1 ~= T2
conjecture inLinee2(T1) & inLined5(T2) -> T1 ~= T2
conjecture inLinee2(T1) & inLinefinishedLine(T2) -> T1 ~= T2
conjecture inLinee2(T1) & inLinedReturn(T2) -> T1 ~= T2
conjecture inLinee3(T1) & inLinee4(T2) -> T1 ~= T2
conjecture inLinee3(T1) & inLinee5(T2) -> T1 ~= T2
conjecture inLinee3(T1) & inLinee6(T2) -> T1 ~= T2
conjecture inLinee3(T1) & inLinee7(T2) -> T1 ~= T2
conjecture inLinee3(T1) & inLined0(T2) -> T1 ~= T2
conjecture inLinee3(T1) & inLined1(T2) -> T1 ~= T2
conjecture inLinee3(T1) & inLined2(T2) -> T1 ~= T2
conjecture inLinee3(T1) & inLined3(T2) -> T1 ~= T2
conjecture inLinee3(T1) & inLined4(T2) -> T1 ~= T2
conjecture inLinee3(T1) & inLined5(T2) -> T1 ~= T2
conjecture inLinee3(T1) & inLinefinishedLine(T2) -> T1 ~= T2
conjecture inLinee3(T1) & inLinedReturn(T2) -> T1 ~= T2
conjecture inLinee4(T1) & inLinee5(T2) -> T1 ~= T2
conjecture inLinee4(T1) & inLinee6(T2) -> T1 ~= T2
conjecture inLinee4(T1) & inLinee7(T2) -> T1 ~= T2
conjecture inLinee4(T1) & inLined0(T2) -> T1 ~= T2
conjecture inLinee4(T1) & inLined1(T2) -> T1 ~= T2
conjecture inLinee4(T1) & inLined2(T2) -> T1 ~= T2
conjecture inLinee4(T1) & inLined3(T2) -> T1 ~= T2
conjecture inLinee4(T1) & inLined4(T2) -> T1 ~= T2
conjecture inLinee4(T1) & inLined5(T2) -> T1 ~= T2
conjecture inLinee4(T1) & inLinefinishedLine(T2) -> T1 ~= T2
conjecture inLinee4(T1) & inLinedReturn(T2) -> T1 ~= T2
conjecture inLinee5(T1) & inLinee6(T2) -> T1 ~= T2
conjecture inLinee5(T1) & inLinee7(T2) -> T1 ~= T2
conjecture inLinee5(T1) & inLined0(T2) -> T1 ~= T2
conjecture inLinee5(T1) & inLined1(T2) -> T1 ~= T2
conjecture inLinee5(T1) & inLined2(T2) -> T1 ~= T2
conjecture inLinee5(T1) & inLined3(T2) -> T1 ~= T2
conjecture inLinee5(T1) & inLined4(T2) -> T1 ~= T2
conjecture inLinee5(T1) & inLined5(T2) -> T1 ~= T2
conjecture inLinee5(T1) & inLinefinishedLine(T2) -> T1 ~= T2
conjecture inLinee5(T1) & inLinedReturn(T2) -> T1 ~= T2
conjecture inLinee6(T1) & inLinee7(T2) -> T1 ~= T2
conjecture inLinee6(T1) & inLined0(T2) -> T1 ~= T2
conjecture inLinee6(T1) & inLined1(T2) -> T1 ~= T2
conjecture inLinee6(T1) & inLined2(T2) -> T1 ~= T2
conjecture inLinee6(T1) & inLined3(T2) -> T1 ~= T2
conjecture inLinee6(T1) & inLined4(T2) -> T1 ~= T2
conjecture inLinee6(T1) & inLined5(T2) -> T1 ~= T2
conjecture inLinee6(T1) & inLinefinishedLine(T2) -> T1 ~= T2
conjecture inLinee6(T1) & inLinedReturn(T2) -> T1 ~= T2
conjecture inLinee7(T1) & inLined0(T2) -> T1 ~= T2
conjecture inLinee7(T1) & inLined1(T2) -> T1 ~= T2
conjecture inLinee7(T1) & inLined2(T2) -> T1 ~= T2
conjecture inLinee7(T1) & inLined3(T2) -> T1 ~= T2
conjecture inLinee7(T1) & inLined4(T2) -> T1 ~= T2
conjecture inLinee7(T1) & inLined5(T2) -> T1 ~= T2
conjecture inLinee7(T1) & inLinefinishedLine(T2) -> T1 ~= T2
conjecture inLinee7(T1) & inLinedReturn(T2) -> T1 ~= T2
conjecture inLined0(T1) & inLined1(T2) -> T1 ~= T2
conjecture inLined0(T1) & inLined2(T2) -> T1 ~= T2
conjecture inLined0(T1) & inLined3(T2) -> T1 ~= T2
conjecture inLined0(T1) & inLined4(T2) -> T1 ~= T2
conjecture inLined0(T1) & inLined5(T2) -> T1 ~= T2
conjecture inLined0(T1) & inLinefinishedLine(T2) -> T1 ~= T2
conjecture inLined0(T1) & inLinedReturn(T2) -> T1 ~= T2
conjecture inLined1(T1) & inLined2(T2) -> T1 ~= T2
conjecture inLined1(T1) & inLined3(T2) -> T1 ~= T2
conjecture inLined1(T1) & inLined4(T2) -> T1 ~= T2
conjecture inLined1(T1) & inLined5(T2) -> T1 ~= T2
conjecture inLined1(T1) & inLinefinishedLine(T2) -> T1 ~= T2
conjecture inLined1(T1) & inLinedReturn(T2) -> T1 ~= T2
conjecture inLined2(T1) & inLined3(T2) -> T1 ~= T2
conjecture inLined2(T1) & inLined4(T2) -> T1 ~= T2
conjecture inLined2(T1) & inLined5(T2) -> T1 ~= T2
conjecture inLined2(T1) & inLinefinishedLine(T2) -> T1 ~= T2
conjecture inLined2(T1) & inLinedReturn(T2) -> T1 ~= T2
conjecture inLined3(T1) & inLined4(T2) -> T1 ~= T2
conjecture inLined3(T1) & inLined5(T2) -> T1 ~= T2
conjecture inLined3(T1) & inLinefinishedLine(T2) -> T1 ~= T2
conjecture inLined3(T1) & inLinedReturn(T2) -> T1 ~= T2
conjecture inLined4(T1) & inLined5(T2) -> T1 ~= T2
conjecture inLined4(T1) & inLinefinishedLine(T2) -> T1 ~= T2
conjecture inLined4(T1) & inLinedReturn(T2) -> T1 ~= T2
conjecture inLined5(T1) & inLinefinishedLine(T2) -> T1 ~= T2
conjecture inLined5(T1) & inLinedReturn(T2) -> T1 ~= T2
conjecture inLinefinishedLine(T1) & inLinedReturn(T2) -> T1 ~= T2